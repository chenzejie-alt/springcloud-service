server:
  port: 9527
#spring:
#  cloud:
#    gateway:
#      routes:
#        # 路由的ID：payment_route，没有固定规则但是要求唯一，建议配合服务名
#        - id: payment_route
#          # 匹配后提供服务的路由地址
#          uri: http://localhost:8001
#          # 断言，路径相匹配的进行路由
#          predicates:
#            - Path=/payment/get/**
#        - id: payment_route2
#          uri: http://localhost:8001
#          predicates:
#            - Path=/payment/lb/**
#        - id: payment_route3
#          uri: http://localhost:8001
#          predicates:
#            - Path=/payment/discovery
#        - id: payment_route4
#          uri: http://news.baidu.com/guonei
#          predicates:
#            - Path=/guonei
#        - id: payment_route5
#          uri: http://news.baidu.com/guoji
#          predicates:
#            - Path=/guoji
spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      # 开启从注册中心动态创建路由的功能，利用微服务名进行路由
      discovery:
        locator:
          enabled: true
      routes:
        # 路由的ID：payment_route，没有固定规则但是要求唯一，建议配合服务名
        - id: payment_route
          # 匹配后提供服务的路由地址，这地址是写死的。
#          uri: http://localhost:8001
          # 匹配后提供服务的路由地址
          uri: lb://cloud-payment-service
          # 断言，路径相匹配的进行路由
          predicates:
            - Path=/payment/get/**

        - id: payment_route2
          # 匹配后提供服务的路由地址
          uri: lb://cloud-payment-service
          predicates:
            - Path=/payment/lb/**
            - After=2021-04-29T12:01:40.838+08:00[Asia/Shanghai]
#            - Before=2021-04-29T11:01:40.838+08:00[Asia/Shanghai]
#            - Between=2021-04-29T11:01:40.838+08:00[Asia/Shanghai],2021-04-30T11:01:40.838+08:00[Asia/Shanghai]
        - id: payment_route3
          uri: http://localhost:8001
          predicates:
            - Path=/payment/discovery

        - id: payment_route4
          uri: http://news.baidu.com/guonei
          predicates:
            - Path=/guonei

        - id: payment_route5
          uri: http://news.baidu.com/guoji
          predicates:
            - Path=/guoji

eureka:
  instance:
    hostname: cloud-payment-service
  client:
    # 表示是否将自己注册进eurekaServer，默认为true
    register-with-eureka: true
    # 是否从EurekaServer抓取已有的注册信息，默认为true，单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      # defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka